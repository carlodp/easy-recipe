{"version":3,"sources":["modal.module.css","recipe.module.css","Modal.js","Recipe.js","search-filter.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Modal","timeCookDisplay","title","calories","serving","timetocook","image","ingredientList","openModal","closeModal","healthlabels","dietlabels","cautions","nutrientsList","innerRef","useRef","onOuterClick","useEffect","current","document","addEventListener","handleClick","removeEventListener","e","contains","target","useOuterClickNotifier","modal","className","modalStyle","modalWindow","ref","modalBody","closeBtn","onClick","recipeName","firstRow","recipeImage","src","alt","recipeHeadline","infoContainer","toFixed","dietLabels","map","dietlabel","index","healthLabels","healthlabel","caution","secondRow","ingredientContainer","ingredient","text","nutrients","ENERC_KCAL","label","quantity","unit","Recipe","ingredients","madeby","madebylink","key","useState","setopenModal","style","recipe","recipeContainer","imageContainer","draggable","seeMoreDiv","seeMoreDivBody","information","subtitle","seeMoreButton","rel","href","modalContainer","SearchFilter","filterLogic","App","recipes","setRecipes","search","setSearch","query","setQuery","getRecipes","a","fetch","response","json","data","hits","console","log","length","onSubmit","preventDefault","placeholder","type","value","onChange","classList","toggle","li","innerText","uri","yield","totalTime","source","url","totalNutrients","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a64fe28d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalWindow\":\"modal_modalWindow__3iKwR\",\"modalBody\":\"modal_modalBody__1J_aw\",\"leftToright\":\"modal_leftToright__1G-jO\",\"recipeName\":\"modal_recipeName__3Rll9\",\"recipeTitleSeperator\":\"modal_recipeTitleSeperator__qutnS\",\"closeBtn\":\"modal_closeBtn__2qFt-\",\"firstRow\":\"modal_firstRow__8sgWl\",\"recipeImage\":\"modal_recipeImage__2NNmB\",\"recipeHeadline\":\"modal_recipeHeadline__GISCZ\",\"infoContainer\":\"modal_infoContainer__PdW4y\",\"dietLabels\":\"modal_dietLabels__iBm0A\",\"healthLabels\":\"modal_healthLabels__1iJQN\",\"cautions\":\"modal_cautions__GepW_\",\"secondRow\":\"modal_secondRow__xfZSP\",\"nutrients\":\"modal_nutrients__3Gu7y\",\"ingredientContainer\":\"modal_ingredientContainer__1mzii\",\"seperatorAnim\":\"modal_seperatorAnim__2MxMZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__2-sKd\",\"title\":\"recipe_title__19vdS\",\"subtitle\":\"recipe_subtitle__TuogW\",\"information\":\"recipe_information__6g0aV\",\"imageContainer\":\"recipe_imageContainer__3LSzf\",\"image\":\"recipe_image__KYG8K\",\"recipeContainer\":\"recipe_recipeContainer__26bmi\",\"seeMoreButton\":\"recipe_seeMoreButton__2Ex3L\",\"seeMoreDiv\":\"recipe_seeMoreDiv__1Oxnx\",\"seeMoreDivBody\":\"recipe_seeMoreDivBody__1C_WM\",\"madebylink\":\"recipe_madebylink__2SLCh\"};","import React, {useRef, useEffect} from 'react';\r\nimport modalStyle from './modal.module.css';\r\n\r\nfunction useOuterClickNotifier(onOuterClick, innerRef) {\r\n    useEffect(\r\n        () => {\r\n        // only add listener, if the element exists\r\n        if (innerRef.current) {\r\n            document.addEventListener(\"click\", handleClick);\r\n        }\r\n\r\n        // unmount previous first in case inputs have changed\r\n        return () => document.removeEventListener(\"click\", handleClick);\r\n\r\n        function handleClick(e) {\r\n            innerRef.current && !innerRef.current.contains(e.target) && onOuterClick(e);\r\n        }\r\n        },\r\n        [onOuterClick, innerRef] // invoke again, if inputs have changed\r\n    );\r\n}\r\n\r\nconst Modal = ({title, calories, serving, timetocook, image, ingredientList, openModal, closeModal, healthlabels, dietlabels, cautions, nutrientsList}) => {\r\n\r\n    var timeCookDisplay;\r\n    if(timetocook !== 0) {\r\n        timeCookDisplay = <p>Time to Make: <span>{timetocook} Minutes</span></p>\r\n    } else {\r\n        timeCookDisplay = null;\r\n    }\r\n\r\n    const innerRef = useRef(null);\r\n    useOuterClickNotifier(closeModal,innerRef);\r\n    \r\n    let modal = (\r\n        <div className={modalStyle.modalWindow}>\r\n            <div ref={innerRef} className={modalStyle.modalBody}>\r\n                <button className={modalStyle.closeBtn} onClick={closeModal}>Close</button>\r\n                <h1 className={modalStyle.recipeName}>{title}</h1>\r\n                <div className={modalStyle.firstRow}>\r\n                    <div className={modalStyle.recipeImage}>\r\n                        <img src={image} alt={title} />\r\n                    </div>\r\n                    <div className={modalStyle.recipeHeadline}>\r\n                        {/* Check if Time to Cook has value, if value is 0 it won't show */}\r\n                        <div className={modalStyle.infoContainer}>\r\n                            {timeCookDisplay} \r\n                            <p>Servings: <span>{serving}</span></p>\r\n                            <p>Calories per Serving: <span>{(calories / serving).toFixed(0)}</span></p>\r\n                        </div>\r\n                        <div className={modalStyle.dietLabels}>\r\n                            <p>Diet Tags</p>\r\n                            {\r\n                                dietlabels.map((dietlabel, index) => (\r\n                                    <span>{dietlabel}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                        <div className={modalStyle.healthLabels}>\r\n                            <p>Health Tags</p>\r\n                            {\r\n                                healthlabels.map((healthlabel, index) => (\r\n                                    <span>{healthlabel}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                        <div className={modalStyle.cautions}>\r\n                            <p>Cautions</p>\r\n                            {\r\n                                cautions.map((caution, index) => (\r\n                                    <span>{caution}</span>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={modalStyle.secondRow}>\r\n                    <div className={modalStyle.ingredientContainer}>\r\n                        <h2>Recipe Ingredients:</h2>\r\n                        <ul>\r\n                            {\r\n                                ingredientList.map(ingredient => (\r\n                                    <li>{ingredient.text}</li>\r\n                                ))\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                    <div className={modalStyle.nutrients}>\r\n                        <h2>Meal Nutritions:</h2>\r\n                        <ul>\r\n                            <li>{nutrientsList.ENERC_KCAL.label} / {nutrientsList.ENERC_KCAL.quantity} / {nutrientsList.ENERC_KCAL.unit}</li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    if(!openModal){modal = null;}\r\n    return(modal);\r\n\r\n}\r\n\r\nexport default Modal;","import React,{useState} from 'react';\r\nimport Modal from \"./Modal\";\r\nimport style from './recipe.module.css'\r\n\r\nconst Recipe = ({title, calories, image, ingredients, serving, timetocook, madeby, madebylink, healthlabels, dietlabels, cautions, nutrients, key}) => {\r\n    const[openModal, setopenModal] = useState(false);\r\n\r\n    return(\r\n        <div className={style.recipe}>\r\n            <div className={style.recipeContainer}>\r\n                <div className={style.imageContainer}>\r\n                    <img className={style.image} src={image} alt=\"\" draggable=\"false\"/>\r\n                </div>\r\n                <div className={style.seeMoreDiv}>\r\n                    <div className={style.seeMoreDivBody}>\r\n                        <div className={style.information}>\r\n                            <h1 className={style.title}>{title}</h1>\r\n                            <div className={style.subtitle}>\r\n                                <p>Calories: <span>{calories.toFixed(0)}</span></p>\r\n                                <p>Servings: <span>{serving}</span></p>\r\n                            </div>\r\n                        </div>\r\n                        <p className={style.seeMoreButton} onClick={() => setopenModal(true)}>View Recipe</p>\r\n                        <p className={style.madebylink}>By: <a target=\"_blank\" rel=\"noopener noreferrer\" href={madebylink}>{madeby}</a></p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={style.modalContainer}>\r\n            <Modal \r\n                openModal={openModal} \r\n                closeModal={() => setopenModal(false)}\r\n                title={title} \r\n                calories={calories}\r\n                image={image}\r\n                serving={serving}\r\n                timetocook={timetocook}\r\n                ingredientList={ingredients}\r\n                healthlabels={healthlabels}\r\n                dietlabels={dietlabels}\r\n                cautions={cautions}\r\n                nutrientsList={nutrients}\r\n            />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React from 'react';\r\n\r\nexport const SearchFilter = ({ filterLogic }) => (\r\n    <ul className=\"filters\">\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Chicken\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Sushi\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Bread\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Risotto\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Pasta\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Soup\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Dessert\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Salad\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Eggs\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Pizza\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Fish\r\n      </li>\r\n      <li className=\"filter\" onClick={filterLogic}>\r\n        Grill\r\n      </li>\r\n    </ul>\r\n);","import React,{useEffect, useState} from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\nimport { SearchFilter } from './search-filter.component';\n\n\nconst App = () => {\n\n  //API ID & Key\n  const APP_ID = 'c02f2381';\n  const APP_KEY = '0ba1c7c8830d5aea87b9144aadb2a70a';\n\n  //Set state for recipes results, use [] because there's multiple data being returned to this\n  const [recipes, setRecipes] = useState([]);\n  //Set state for the search, use '' because search is a string\n  const [search, setSearch] = useState('');\n  //Set state for the search\n  const[query, setQuery] = useState('chicken');\n\n  //Trigger function to get the recipe\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  //Get the recipes from the API\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n    console.log(data.hits.length);\n  }\n\n  //When user clicks search button, this function will run, use 'e' because this function is an event\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n  }\n\n  const filterLogic = e => {\n    e.target.classList.toggle('active-filter');\n    const li = e.target;\n    if (li.classList.contains('active-filter')) {\n      setQuery(li.innerText);\n    } else {\n      setQuery('');\n    }\n  };\n\n  return (\n      <form onSubmit={getSearch} className=\"recipe-body\">\n        <div className=\"search-form\">\n            <div className=\"header-title\">Easy Recipes</div>\n            <input className=\"search-bar\" placeholder=\"Search a dish here..\" type=\"text\" value={search} onChange={updateSearch} />\n            <button className=\"search-button\" type=\"submit\">Search</button>\n\n            <div className=\"search-filter\">\n              <p className=\"search-filter-header\">Quick Filters</p>\n              <SearchFilter filterLogic={filterLogic} />\n            </div>\n          \n            <div className=\"footer-credits\">\n              <p>Made by: <span>Carlo Santos</span></p>\n            </div>\n        </div>\n        <div className=\"recipes-container\">\n        {recipes.map(recipe =>(\n            <Recipe \n            key={recipe.recipe.uri}\n            title={recipe.recipe.label} \n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            serving={recipe.recipe.yield}\n            timetocook={recipe.recipe.totalTime}\n            madeby={recipe.recipe.source}\n            madebylink={recipe.recipe.url}\n            healthlabels={recipe.recipe.healthLabels}\n            dietlabels={recipe.recipe.dietLabels}\n            cautions={recipe.recipe.cautions}\n            nutrients={recipe.recipe.totalNutrients}\n            />\n        ))}\n        </div>\n      </form>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}